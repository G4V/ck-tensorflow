{
  "backup_data_uid": "81ff2123447a8b0f",
  "compile_deps": {
    "compiler": {
      "local": "yes", 
      "name": "C++ compiler",
      "sort": 0,
      "tags": "compiler,lang-cpp"
    },
    "lib-tflite": {
      "local": "yes",
      "name": "TensorFlow Lite library",
      "sort": 20,
      "tags": "lib,tensorflow-lite,tflite,vstatic",
      "version_from": [
        1,
        13,
        1
      ]
    },
    "lib-xopenme": {
      "local": "yes",
      "name": "xOpenME library",
      "sort": 100,
      "tags": "lib,xopenme"
    }
  },
  "compiler_add_include_as_env_from_deps": [
    "CK_ENV_LIB_STDCPP_INCLUDE",
    "CK_ENV_LIB_STDCPP_INCLUDE_EXTRA",
    "CK_ENV_LIB_TF_INCLUDE0",
    "CK_ENV_LIB_TF_INCLUDE1",
    "CK_ENV_LIB_TF_INCLUDE2"
  ], 
  "compiler_env": "CK_CXX",
  "compiler_flags_as_env": "$<<CK_COMPILER_FLAG_CPP11>>$ $<<CK_ENV_LIB_TF_DEF>>$ -Wall -Wno-sign-compare",
  "data_name": "object-detection-tflite",
  "extra_ld_vars": "$<<CK_ENV_LIB_TF_LINK_OPTIONS>>$ $<<CK_ENV_LIB_TF_LIBS_DIRS>>$ $<<CK_ENV_LIB_TF_LIBS>>$ $<<CK_EXTRA_LIB_LOG>>$",
  "linker_add_lib_as_env": [
    "CK_CXX_EXTRA",
    "CK_ENV_LIB_STDCPP_STATIC"
  ],
  "main_language": "cpp",
  "only_for_target_os_tags": [
    "linux",
    "android"
  ],
  "need_cpu_info": "yes",
  "process_in_tmp": "yes",
  "program": "yes",
  "run_cmds": {
    "default": {
      "ignore_return_code": "no",
      "run_time": {
        "fine_grain_timer_file": "tmp-ck-timer.json",
        "pre_process_via_ck": {
          "data_uoa":       "24c98b0cee248d93",
          "module_uoa":     "script",
          "script_name":    "preprocess"
        },
        "post_process_via_ck": {
          "data_uoa":       "24c98b0cee248d93",
          "module_uoa":     "script",
          "script_name":    "postprocess"
        },
        "run_cmd_main": "$#BIN_FILE#$",
        "run_output_files": [
          "tmp-ck-timer.json"
        ]
      }
    }
  },
  "run_deps": {
    "dataset": {
      "force_target_as_host": "yes",
      "local": "yes",
      "name": "Object Detection dataset",
      "sort": 10,
      "tags": "dataset,object-detection"
    },
    "weights": {
      "force_target_as_host": "yes",
      "local": "yes",
      "name": "Object Detection model",
      "sort": 20,
      "tags": "model,tflite,object-detection"
    },
    "python": {
      "force_target_as_host": "yes",
      "local": "yes",
      "name": "Python interpreter",
      "sort": 30,
      "tags": "compiler,lang-python"
    },
    "lib-python-numpy": {
      "force_target_as_host": "yes",
      "local": "yes",
      "name": "Python NumPy library",
      "sort": 40,
      "tags": "lib,python-package,numpy"
    },
    "lib-python-pillow": {
      "force_target_as_host": "yes",
      "local": "yes",
      "name": "Python Pillow library",
      "sort": 50,
      "tags": "lib,python-package,pillow"
    },
    "lib-python-matplotlib": {
      "force_target_as_host": "yes",
      "local": "yes",
      "name": "Python Matplotlib library",
      "sort": 60,
      "tags": "lib,python-package,matplotlib"
    },
    "tensorflowmodel-api": {
      "force_target_as_host": "yes",
      "local": "yes",
      "name": "TensorFlow model API",
      "sort": 80,
      "tags": "tensorflowmodel,api"
    },
    "tool-coco": {
      "force_target_as_host": "yes",
      "local": "yes",
      "name": "Python API for COCO",
      "sort": 90,
      "tags": "tool,coco"
    }
  },
  "run_vars": {
    "CK_TIMER_FILE": "tmp-ck-timer.json",
    "CK_PREPROCESSED_FOF_WITH_ORIGINAL_DIMENSIONS": "preprocessed_images_list.txt",
    "CK_PREPROCESSED_OUT_DIR": "preprocessed",
    "CK_DETECTIONS_OUT_DIR": "detections",
    "CK_RESULTS_OUT_DIR": "results",
    "CK_ANNOTATIONS_OUT_DIR": "annotations",
    "CK_BATCH_COUNT": 1,
    "CK_BATCH_SIZE": 1,
    "CK_SKIP_IMAGES": 0,
    "CK_SILENT_MODE": 0
  },
  "skip_bin_ext": "yes",
  "source_files": [
    "detect.cpp"
  ],
  "tags": [
    "tensorflow-lite",
    "object-detection",
    "tflite",
    "lang-cpp"
  ],
  "target_file": "detect",
  "template": "yes",
  "template_type": "Object Detection via TFLite (C++)"
}
